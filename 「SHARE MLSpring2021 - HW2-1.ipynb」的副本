{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"「SHARE MLSpring2021 - HW2-1.ipynb」的副本","provenance":[{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW02/HW02-1.ipynb","timestamp":1615965470813}],"collapsed_sections":[],"history_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"OYlaRwNu7ojq"},"source":["# **Homework 2-1 Phoneme Classification**"]},{"cell_type":"code","metadata":{"id":"8zG1lT9vCYGH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617365550628,"user_tz":-480,"elapsed":33633,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"2d3a549b-5a5f-48bc-d148-df4e50a50298"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"emUd7uS7crTz"},"source":["## The DARPA TIMIT Acoustic-Phonetic Continuous Speech Corpus (TIMIT)\n","The TIMIT corpus of reading speech has been designed to provide speech data for the acquisition of acoustic-phonetic knowledge and for the development and evaluation of automatic speech recognition systems.\n","\n","This homework is a multiclass classification task, \n","we are going to train a deep neural network classifier to predict the phonemes for each frame from the speech corpus TIMIT.\n","\n","link: https://academictorrents.com/details/34e2b78745138186976cbc27939b1b34d18bd5b3"]},{"cell_type":"markdown","metadata":{"id":"KVUGfWTo7_Oj"},"source":["## Download Data\n","Download data from google drive, then unzip it.\n","\n","You should have `timit_11/train_11.npy`, `timit_11/train_label_11.npy`, and `timit_11/test_11.npy` after running this block.<br><br>\n","`timit_11/`\n","- `train_11.npy`: training data<br>\n","- `train_label_11.npy`: training label<br>\n","- `test_11.npy`:  testing data<br><br>\n","\n","**notes: if the google drive link is dead, you can download the data directly from Kaggle and upload it to the workspace**\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OzkiMEcC3Foq","executionInfo":{"status":"ok","timestamp":1617365593767,"user_tz":-480,"elapsed":981,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"63e1e4ea-fbb5-43be-f4df-dd3bc6d7490b"},"source":["!gdown --id '1HPkcmQmFGu-3OknddKIa5dNDsR05lIQR' --output data.zip\n","!unzip data.zip\n","!ls "],"execution_count":9,"outputs":[{"output_type":"stream","text":["Permission denied: https://drive.google.com/uc?id=1HPkcmQmFGu-3OknddKIa5dNDsR05lIQR\n","Maybe you need to change permission over 'Anyone with the link'?\n","unzip:  cannot find or open data.zip, data.zip.zip or data.zip.ZIP.\n","drive  sample_data\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_L_4anls8Drv"},"source":["## Preparing Data\n","Load the training and testing data from the `.npy` file (NumPy array)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IJjLT8em-y9G","executionInfo":{"status":"ok","timestamp":1617365860520,"user_tz":-480,"elapsed":120878,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"a02e3ab2-0686-4886-86f3-aeb4670a0dec"},"source":["import numpy as np\n","# import Google Drive 套件\n","from google.colab import drive\n","# 將自己的雲端硬碟掛載上去\n","drive.mount('/content/gdrive')\n","print('Loading data ...')\n","\n","data_root='gdrive/MyDrive/碩二/機器學習/HW2/3.18/timit_11/'\n","train = np.load(data_root+'train_11.npy')\n","train_label = np.load(data_root+'train_label_11.npy')\n","test = np.load(data_root+'test_11.npy')\n","\n","print('Size of training data: {}'.format(train.shape))\n","print('Size of testing data: {}'.format(test.shape))"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n","Loading data ...\n","Size of training data: (1229932, 429)\n","Size of testing data: (451552, 429)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"us5XW_x6udZQ"},"source":["## Create Dataset"]},{"cell_type":"code","metadata":{"id":"Fjf5EcmJtf4e","executionInfo":{"status":"ok","timestamp":1617365864583,"user_tz":-480,"elapsed":817,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["import torch\n","from torch.utils.data import Dataset\n","\n","class TIMITDataset(Dataset):\n","    def __init__(self, X, y=None):\n","        self.data = torch.from_numpy(X).float()\n","        if y is not None:\n","            y = y.astype(np.int)\n","            self.label = torch.LongTensor(y)\n","        else:\n","            self.label = None\n","\n","    def __getitem__(self, idx):\n","        if self.label is not None:\n","            return self.data[idx], self.label[idx]\n","        else:\n","            return self.data[idx]\n","\n","    def __len__(self):\n","        return len(self.data)\n"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"otIC6WhGeh9v"},"source":["Split the labeled data into a training set and a validation set, you can modify the variable `VAL_RATIO` to change the ratio of validation data."]},{"cell_type":"code","metadata":{"id":"sYqi_lAuvC59","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617365871580,"user_tz":-480,"elapsed":623,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"973eb9ab-291e-4d3c-84d3-a6f2a01ce5e1"},"source":["VAL_RATIO = 0.1\n","\n","percent = int(train.shape[0] * (1 - VAL_RATIO))\n","train_x, train_y, val_x, val_y = train[:percent], train_label[:percent], train[percent:], train_label[percent:]\n","print('Size of training set: {}'.format(train_x.shape))\n","print('Size of validation set: {}'.format(val_x.shape))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Size of training set: (1106938, 429)\n","Size of validation set: (122994, 429)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nbCfclUIgMTX"},"source":["Create a data loader from the dataset, feel free to tweak the variable `BATCH_SIZE` here."]},{"cell_type":"code","metadata":{"id":"RUCbQvqJurYc","executionInfo":{"status":"ok","timestamp":1617365876296,"user_tz":-480,"elapsed":2354,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["BATCH_SIZE = 64\n","\n","from torch.utils.data import DataLoader\n","\n","train_set = TIMITDataset(train_x, train_y)\n","val_set = TIMITDataset(val_x, val_y)\n","train_loader = DataLoader(train_set, batch_size=BATCH_SIZE, shuffle=True) #only shuffle the training data\n","val_loader = DataLoader(val_set, batch_size=BATCH_SIZE, shuffle=False)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_SY7X0lUgb50"},"source":["Cleanup the unneeded variables to save memory.<br>\n","\n","**notes: if you need to use these variables later, then you may remove this block or clean up unneeded variables later<br>the data size is quite huge, so be aware of memory usage in colab**"]},{"cell_type":"code","metadata":{"id":"y8rzkGraeYeN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617365878894,"user_tz":-480,"elapsed":735,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"6cce7110-82c0-454e-8beb-56d62d3f453a"},"source":["import gc\n","\n","del train, train_label, train_x, train_y, val_x, val_y\n","gc.collect()"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["645"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"IRqKNvNZwe3V"},"source":["## Create Model"]},{"cell_type":"markdown","metadata":{"id":"FYr1ng5fh9pA"},"source":["Define model architecture, you are encouraged to change and experiment with the model architecture."]},{"cell_type":"code","metadata":{"id":"lbZrwT6Ny0XL","executionInfo":{"status":"ok","timestamp":1617365885153,"user_tz":-480,"elapsed":713,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["import torch\n","import torch.nn as nn\n","\n","class Classifier(nn.Module):\n","    def __init__(self):\n","        super(Classifier, self).__init__()\n","        self.layer1 = nn.Linear(429, 1024)\n","        self.bn1 = nn.BatchNorm1d(num_features=1024)\n","        self.layer2 = nn.Linear(1024, 512)\n","        self.layer3 = nn.Linear(512, 128)\n","        self.out = nn.Linear(128, 39) \n","        self.act_fn = nn.ReLU()\n","        self.dropout = nn.Dropout(p=0.5)\n","        #self.act_fn = nn.Sigmoid()\n","\n","    def forward(self, x):\n","        x = self.layer1(x)\n","        x = self.bn1(x)\n","        x = self.act_fn(x)\n","        x = self.dropout(x)\n","        x = self.layer2(x)\n","        #x = self.act_fn(x)\n","\n","        x = self.layer3(x)\n","        #x = self.act_fn(x)\n","\n","        x = self.out(x)\n","        \n","        return x"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VRYciXZvPbYh"},"source":["## Training"]},{"cell_type":"code","metadata":{"id":"y114Vmm3Ja6o","executionInfo":{"status":"ok","timestamp":1617365887041,"user_tz":-480,"elapsed":684,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["#check device\n","def get_device():\n","  return 'cuda' if torch.cuda.is_available() else 'cpu'"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sEX-yjHjhGuH"},"source":["Fix random seeds for reproducibility."]},{"cell_type":"code","metadata":{"id":"88xPiUnm0tAd","executionInfo":{"status":"ok","timestamp":1617365888972,"user_tz":-480,"elapsed":912,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["# fix random seed\n","def same_seeds(seed):\n","    torch.manual_seed(seed)\n","    if torch.cuda.is_available():\n","        torch.cuda.manual_seed(seed)\n","        torch.cuda.manual_seed_all(seed)  \n","    np.random.seed(seed)  \n","    torch.backends.cudnn.benchmark = False\n","    torch.backends.cudnn.deterministic = True"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KbBcBXkSp6RA"},"source":["Feel free to change the training parameters here."]},{"cell_type":"code","metadata":{"id":"QTp3ZXg1yO9Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617365901282,"user_tz":-480,"elapsed":11359,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"03d290c6-3435-4e84-a7d5-e67da00c3b31"},"source":["# fix random seed for reproducibility\n","same_seeds(0)\n","\n","# get device \n","device = get_device()\n","print(f'DEVICE: {device}')\n","\n","# training parameters\n","num_epoch = 30               # number of training epoch\n","learning_rate = 0.0001       # learning rate\n","\n","# the path where checkpoint saved\n","model_path = './model.ckpt'\n","\n","# create model, define a loss function, and optimizer\n","model = Classifier().to(device)\n","criterion = nn.CrossEntropyLoss() \n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate ,weight_decay=0.005)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["DEVICE: cuda\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CdMWsBs7zzNs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617367193622,"user_tz":-480,"elapsed":1292323,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"dead1e44-0080-4ca9-b08e-0820a0362317"},"source":["# start training\n","\n","best_acc = 0.0\n","for epoch in range(num_epoch):\n","    train_acc = 0.0\n","    train_loss = 0.0\n","    val_acc = 0.0\n","    val_loss = 0.0\n","\n","    # training\n","    model.train() # set the model to training mode\n","    for i, data in enumerate(train_loader):\n","        inputs, labels = data\n","        inputs, labels = inputs.to(device), labels.to(device)\n","        optimizer.zero_grad() \n","        outputs = model(inputs) \n","        batch_loss = criterion(outputs, labels)\n","        _, train_pred = torch.max(outputs, 1) # get the index of the class with the highest probability\n","        batch_loss.backward() \n","        optimizer.step() \n","\n","        train_acc += (train_pred.cpu() == labels.cpu()).sum().item()\n","        train_loss += batch_loss.item()\n","\n","    # validation\n","    if len(val_set) > 0:\n","        model.eval() # set the model to evaluation mode\n","        with torch.no_grad():\n","            for i, data in enumerate(val_loader):\n","                inputs, labels = data\n","                inputs, labels = inputs.to(device), labels.to(device)\n","                outputs = model(inputs)\n","                batch_loss = criterion(outputs, labels) \n","                _, val_pred = torch.max(outputs, 1) \n","            \n","                val_acc += (val_pred.cpu() == labels.cpu()).sum().item() # get the index of the class with the highest probability\n","                val_loss += batch_loss.item()\n","\n","            print('[{:03d}/{:03d}] Train Acc: {:3.6f} Loss: {:3.6f} | Val Acc: {:3.6f} loss: {:3.6f}'.format(\n","                epoch + 1, num_epoch, train_acc/len(train_set), train_loss/len(train_loader), val_acc/len(val_set), val_loss/len(val_loader)\n","            ))\n","\n","            # if the model improves, save a checkpoint at this epoch\n","            if val_acc > best_acc:\n","                best_acc = val_acc\n","                torch.save(model.state_dict(), model_path)\n","                print('saving model with acc {:.3f}'.format(best_acc/len(val_set)))\n","    else:\n","        print('[{:03d}/{:03d}] Train Acc: {:3.6f} Loss: {:3.6f}'.format(\n","            epoch + 1, num_epoch, train_acc/len(train_set), train_loss/len(train_loader)\n","        ))\n","\n","# if not validating, save the last epoch\n","if len(val_set) == 0:\n","    torch.save(model.state_dict(), model_path)\n","    print('saving model at last epoch')\n"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[001/030] Train Acc: 0.538647 Loss: 1.532402 | Val Acc: 0.592655 loss: 1.367052\n","saving model with acc 0.593\n","[002/030] Train Acc: 0.552022 Loss: 1.481431 | Val Acc: 0.588248 loss: 1.370337\n","[003/030] Train Acc: 0.552033 Loss: 1.479752 | Val Acc: 0.588850 loss: 1.363557\n","[004/030] Train Acc: 0.553122 Loss: 1.476150 | Val Acc: 0.586435 loss: 1.361601\n","[005/030] Train Acc: 0.553397 Loss: 1.474751 | Val Acc: 0.589419 loss: 1.362882\n","[006/030] Train Acc: 0.554065 Loss: 1.472088 | Val Acc: 0.593370 loss: 1.357746\n","saving model with acc 0.593\n","[007/030] Train Acc: 0.553846 Loss: 1.473095 | Val Acc: 0.590167 loss: 1.357816\n","[008/030] Train Acc: 0.554475 Loss: 1.471923 | Val Acc: 0.590826 loss: 1.356242\n","[009/030] Train Acc: 0.553955 Loss: 1.472370 | Val Acc: 0.589435 loss: 1.356941\n","[010/030] Train Acc: 0.554345 Loss: 1.472276 | Val Acc: 0.595086 loss: 1.359429\n","saving model with acc 0.595\n","[011/030] Train Acc: 0.554778 Loss: 1.471787 | Val Acc: 0.594761 loss: 1.355679\n","[012/030] Train Acc: 0.554910 Loss: 1.471270 | Val Acc: 0.592126 loss: 1.357088\n","[013/030] Train Acc: 0.555557 Loss: 1.470216 | Val Acc: 0.593988 loss: 1.352317\n","[014/030] Train Acc: 0.555645 Loss: 1.468520 | Val Acc: 0.592216 loss: 1.356067\n","[015/030] Train Acc: 0.555855 Loss: 1.469061 | Val Acc: 0.595192 loss: 1.355348\n","saving model with acc 0.595\n","[016/030] Train Acc: 0.555801 Loss: 1.468269 | Val Acc: 0.596354 loss: 1.350647\n","saving model with acc 0.596\n","[017/030] Train Acc: 0.555768 Loss: 1.467858 | Val Acc: 0.596972 loss: 1.349335\n","saving model with acc 0.597\n","[018/030] Train Acc: 0.556323 Loss: 1.466760 | Val Acc: 0.592834 loss: 1.350715\n","[019/030] Train Acc: 0.555962 Loss: 1.467042 | Val Acc: 0.595387 loss: 1.347892\n","[020/030] Train Acc: 0.556244 Loss: 1.466843 | Val Acc: 0.590411 loss: 1.357355\n","[021/030] Train Acc: 0.556484 Loss: 1.466040 | Val Acc: 0.594484 loss: 1.353840\n","[022/030] Train Acc: 0.556532 Loss: 1.465484 | Val Acc: 0.593996 loss: 1.348833\n","[023/030] Train Acc: 0.556453 Loss: 1.465958 | Val Acc: 0.596875 loss: 1.346868\n","[024/030] Train Acc: 0.556176 Loss: 1.465491 | Val Acc: 0.597102 loss: 1.352935\n","saving model with acc 0.597\n","[025/030] Train Acc: 0.556278 Loss: 1.464744 | Val Acc: 0.596712 loss: 1.351359\n","[026/030] Train Acc: 0.556378 Loss: 1.464818 | Val Acc: 0.592850 loss: 1.352691\n","[027/030] Train Acc: 0.556488 Loss: 1.465046 | Val Acc: 0.594370 loss: 1.353395\n","[028/030] Train Acc: 0.556830 Loss: 1.463730 | Val Acc: 0.593240 loss: 1.351000\n","[029/030] Train Acc: 0.556338 Loss: 1.464762 | Val Acc: 0.596086 loss: 1.350191\n","[030/030] Train Acc: 0.556478 Loss: 1.463803 | Val Acc: 0.590752 loss: 1.359385\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1Hi7jTn3PX-m"},"source":["## Testing"]},{"cell_type":"markdown","metadata":{"id":"NfUECMFCn5VG"},"source":["Create a testing dataset, and load model from the saved checkpoint."]},{"cell_type":"code","metadata":{"id":"1PKjtAScPWtr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617367194932,"user_tz":-480,"elapsed":1279,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"f6c5fa94-667f-4ff6-8107-57d0be0c6580"},"source":["# create testing dataset\n","test_set = TIMITDataset(test, None)\n","test_loader = DataLoader(test_set, batch_size=BATCH_SIZE, shuffle=False)\n","\n","# create model and load weights from checkpoint\n","model = Classifier().to(device)\n","model.load_state_dict(torch.load(model_path))"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"940TtCCdoYd0"},"source":["Make prediction."]},{"cell_type":"code","metadata":{"id":"84HU5GGjPqR0","executionInfo":{"status":"ok","timestamp":1617367199191,"user_tz":-480,"elapsed":5521,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["predict = []\n","model.eval() # set the model to evaluation mode\n","with torch.no_grad():\n","    for i, data in enumerate(test_loader):\n","        inputs = data\n","        inputs = inputs.to(device)\n","        outputs = model(inputs)\n","        _, test_pred = torch.max(outputs, 1) # get the index of the class with the highest probability\n","\n","        for y in test_pred.cpu().numpy():\n","            predict.append(y)"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AWDf_C-omElb"},"source":["Write prediction to a CSV file.\n","\n","After finish running this block, download the file `prediction.csv` from the files section on the left-hand side and submit it to Kaggle."]},{"cell_type":"code","metadata":{"id":"GuljYSPHcZir","executionInfo":{"status":"ok","timestamp":1617367199545,"user_tz":-480,"elapsed":5865,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["with open('prediction1.csv', 'w') as f:\n","    f.write('Id,Class\\n')\n","    for i, y in enumerate(predict):\n","        f.write('{},{}\\n'.format(i, y))"],"execution_count":25,"outputs":[]}]}