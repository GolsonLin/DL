{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"「ML2021Spring - HW1.ipynb」的副本","provenance":[{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb","timestamp":1615217175058}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"mz0_QVkxCrX3"},"source":["# **Homework 1: COVID-19 Cases Prediction (Regression)**"]},{"cell_type":"markdown","metadata":{"id":"ZeZnPAiwDRWG"},"source":["Author: Heng-Jui Chang\n","\n","Slides: https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.pdf  \n","Video: TBA\n","\n","Objectives:\n","* Solve a regression problem with deep neural networks (DNN).\n","* Understand basic DNN training tips.\n","* Get familiar with PyTorch.\n","\n","If any questions, please contact the TAs via TA hours, NTU COOL, or email.\n"]},{"cell_type":"markdown","metadata":{"id":"Jx3x1nDkG-Uy"},"source":["# **Download Data**\n","\n","\n","If the Google drive links are dead, you can download data from [kaggle](https://www.kaggle.com/c/ml2021spring-hw1/data), and upload data manually to the workspace."]},{"cell_type":"code","metadata":{"id":"tMj55YDKG6ch","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616765236413,"user_tz":-480,"elapsed":3633,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"83b2758d-da4b-48ef-b992-cbf2fdbf5d01"},"source":["tr_path = 'covid.train.csv'  # path to training data\n","tt_path = 'covid.test.csv'   # path to testing data\n","\n","!gdown --id '19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF' --output covid.train.csv\n","!gdown --id '1CE240jLm2npU-tdz81-oVKEF3T2yfT1O' --output covid.test.csv"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Downloading...\n","From: https://drive.google.com/uc?id=19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF\n","To: /content/covid.train.csv\n","100% 2.00M/2.00M [00:00<00:00, 62.9MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1CE240jLm2npU-tdz81-oVKEF3T2yfT1O\n","To: /content/covid.test.csv\n","100% 651k/651k [00:00<00:00, 94.8MB/s]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7BaXD_3chbfn","executionInfo":{"status":"ok","timestamp":1616765278255,"user_tz":-480,"elapsed":45459,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"fdbd6b93-a8e9-4896-bc04-4e121ec3bc62"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wS_4-77xHk44"},"source":["# **Import Some Packages**"]},{"cell_type":"code","metadata":{"id":"k-onQd4JNA5H","executionInfo":{"status":"ok","timestamp":1616765282239,"user_tz":-480,"elapsed":49430,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["# PyTorch\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","# For data preprocess\n","import numpy as np\n","import csv\n","import os\n","\n","# For plotting\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","\n","myseed = 42069  # set a random seed for reproducibility\n","torch.backends.cudnn.deterministic = True\n","torch.backends.cudnn.benchmark = False\n","np.random.seed(myseed)\n","torch.manual_seed(myseed)\n","if torch.cuda.is_available():\n","    torch.cuda.manual_seed_all(myseed)"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BtE3b6JEH7rw"},"source":["# **Some Utilities**\n","\n","You do not need to modify this part."]},{"cell_type":"code","metadata":{"id":"FWMT3uf1NGQp","executionInfo":{"status":"ok","timestamp":1616765282243,"user_tz":-480,"elapsed":49428,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["def get_device():\n","    ''' Get device (if GPU is available, use GPU) '''\n","    return 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","def plot_learning_curve(loss_record, title=''):\n","    ''' Plot learning curve of your DNN (train & dev loss) '''\n","    total_steps = len(loss_record['train'])\n","    x_1 = range(total_steps)\n","    x_2 = x_1[::len(loss_record['train']) // len(loss_record['dev'])]\n","    figure(figsize=(6, 4))\n","    plt.plot(x_1, loss_record['train'], c='tab:red', label='train')\n","    plt.plot(x_2, loss_record['dev'], c='tab:cyan', label='dev')\n","    plt.ylim(0.0, 5.)\n","    plt.xlabel('Training steps')\n","    plt.ylabel('MSE loss')\n","    plt.title('Learning curve of {}'.format(title))\n","    plt.legend()\n","    plt.show()\n","\n","\n","def plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):\n","    ''' Plot prediction of your DNN '''\n","    if preds is None or targets is None:\n","        model.eval()\n","        preds, targets = [], []\n","        for x, y in dv_set:\n","            x, y = x.to(device), y.to(device)\n","            with torch.no_grad():\n","                pred = model(x)\n","                preds.append(pred.detach().cpu())\n","                targets.append(y.detach().cpu())\n","        preds = torch.cat(preds, dim=0).numpy()\n","        targets = torch.cat(targets, dim=0).numpy()\n","\n","    figure(figsize=(5, 5))\n","    plt.scatter(targets, preds, c='r', alpha=0.5)\n","    plt.plot([-0.2, lim], [-0.2, lim], c='b')\n","    plt.xlim(-0.2, lim)\n","    plt.ylim(-0.2, lim)\n","    plt.xlabel('ground truth value')\n","    plt.ylabel('predicted value')\n","    plt.title('Ground Truth v.s. Prediction')\n","    plt.show()"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"39U_XFX6KOoj"},"source":["# **Preprocess**\n","\n","We have three kinds of datasets:\n","* `train`: for training\n","* `dev`: for validation\n","* `test`: for testing (w/o target value)"]},{"cell_type":"markdown","metadata":{"id":"TQ-MdwpLL7Dt"},"source":["## **Dataset**\n","\n","The `COVID19Dataset` below does:\n","* read `.csv` files\n","* extract features\n","* split `covid.train.csv` into train/dev sets\n","* normalize features\n","\n","Finishing `TODO` below might make you pass medium baseline."]},{"cell_type":"code","metadata":{"id":"0zlpIp9ANJRU","executionInfo":{"status":"ok","timestamp":1616767032985,"user_tz":-480,"elapsed":776,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["class COVID19Dataset(Dataset):\n","    ''' Dataset for loading and preprocessing the COVID19 dataset '''\n","    def __init__(self,\n","                 path,\n","                 mode='train',\n","                 target_only=False):\n","        self.mode = mode\n","\n","        # Read data into numpy arrays\n","        with open(path, 'r') as fp:\n","            data = list(csv.reader(fp))\n","            data = np.array(data[1:])[:, 1:].astype(float)\n","        \n","        if not target_only:\n","            feats = list(range(93))\n","        else:\n","            # TODO: Using 40 states & 2 tested_positive features (indices = 57 & 75)\n","            feats=list(range(40))+[40,41,42,43,57,58,59,60,61,75,76,77,78,79]#\n","            pass\n","\n","        if mode == 'test':\n","            # Testing data\n","            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))\n","            data = data[:, feats]\n","            self.data = torch.FloatTensor(data)\n","        else:\n","            # Training data (train/dev sets)\n","            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))\n","            target = data[:, -1]\n","            data = data[:, feats]\n","            \n","            # Splitting training data into train & dev sets\n","            if mode == 'train':\n","                indices = [i for i in range(len(data)) if i % 20 != 0]\n","            elif mode == 'dev':\n","                indices = [i for i in range(len(data)) if i % 20 == 0]\n","            \n","            # Convert data into PyTorch tensors\n","            self.data = torch.FloatTensor(data[indices])\n","            self.target = torch.FloatTensor(target[indices])\n","\n","        # Normalize features (you may remove this part to see what will happen)\n","        # #self.data[:, 40:] = \\\n","        #     (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \\\n","        #     / self.data[:, 40:].std(dim=0, keepdim=True)\n","\n","        self.dim = self.data.shape[1]\n","\n","        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'\n","              .format(mode, len(self.data), self.dim))\n","\n","    def __getitem__(self, index):\n","        # Returns one sample at a time\n","        if self.mode in ['train', 'dev']:\n","            # For training\n","            return self.data[index], self.target[index]\n","        else:\n","            # For testing (no target)\n","            return self.data[index]\n","\n","    def __len__(self):\n","        # Returns the size of the dataset\n","        return len(self.data)"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AlhTlkE7MDo3"},"source":["## **DataLoader**\n","\n","A `DataLoader` loads data from a given `Dataset` into batches.\n"]},{"cell_type":"code","metadata":{"id":"hlhLk5t6MBX3","executionInfo":{"status":"ok","timestamp":1616767040839,"user_tz":-480,"elapsed":1221,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["def prep_dataloader(path, mode, batch_size, n_jobs=0, target_only=False):\n","    ''' Generates a dataset, then is put into a dataloader. '''\n","    dataset = COVID19Dataset(path, mode=mode, target_only=target_only)  # Construct dataset\n","    dataloader = DataLoader(\n","        dataset, batch_size,\n","        shuffle=(mode == 'train'), drop_last=False,\n","        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader\n","    return dataloader"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SGuycwR0MeQB"},"source":["# **Deep Neural Network**\n","\n","`NeuralNet` is an `nn.Module` designed for regression.\n","The DNN consists of 2 fully-connected layers with ReLU activation.\n","This module also included a function `cal_loss` for calculating loss.\n"]},{"cell_type":"code","metadata":{"id":"49-uXYovOAI0","executionInfo":{"status":"ok","timestamp":1616769791402,"user_tz":-480,"elapsed":1007,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["class NeuralNet(nn.Module):\n","    ''' A simple fully-connected deep neural network '''\n","    def __init__(self, input_dim):\n","        super(NeuralNet, self).__init__()\n","\n","        # Define your neural network here\n","        # TODO: How to modify this model to achieve better performance?\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim,64),            \n","            nn.ReLU(),                                         \n","            nn.Linear(64, 64),                                                    \n","            nn.Linear(64, 1),\n","        )\n","\n","        # Mean squared error loss\n","        self.criterion = nn.MSELoss(reduction='mean')\n","\n","    def forward(self, x):\n","        ''' Given input of size (batch_size x input_dim), compute output of the network '''\n","        return self.net(x).squeeze(1)\n","\n","    def cal_loss(self, pred, target):\n","        ''' Calculate loss '''\n","        # TODO: you may implement L2 regularization here\n","        return torch.sqrt(self.criterion(pred, target))"],"execution_count":51,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DvFWVjZ5Nvga"},"source":["# **Train/Dev/Test**"]},{"cell_type":"markdown","metadata":{"id":"MAM8QecJOyqn"},"source":["## **Training**"]},{"cell_type":"code","metadata":{"id":"lOqcmYzMO7jB","executionInfo":{"status":"ok","timestamp":1616767050291,"user_tz":-480,"elapsed":767,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["def train(tr_set, dv_set, model, config, device):\n","    ''' DNN training '''\n","\n","    n_epochs = config['n_epochs']  # Maximum number of epochs\n","\n","    # Setup optimizer\n","    optimizer = getattr(torch.optim, config['optimizer'])(\n","        model.parameters(), **config['optim_hparas'])\n","\n","    min_mse = 1000.\n","    loss_record = {'train': [], 'dev': []}      # for recording training loss\n","    early_stop_cnt = 0\n","    epoch = 0\n","    while epoch < n_epochs:\n","        model.train()                           # set model to training mode\n","        for x, y in tr_set:                     # iterate through the dataloader\n","            optimizer.zero_grad()               # set gradient to zero\n","            x, y = x.to(device), y.to(device)   # move data to device (cpu/cuda)\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","            mse_loss.backward()                 # compute gradient (backpropagation)\n","            optimizer.step()                    # update model with optimizer\n","            loss_record['train'].append(mse_loss.detach().cpu().item())\n","\n","        # After each epoch, test your model on the validation (development) set.\n","        dev_mse = dev(dv_set, model, device)\n","        if dev_mse < min_mse:\n","            # Save model if your model improved\n","            min_mse = dev_mse\n","            print('Saving model (epoch = {:4d}, loss = {:.4f})'\n","                .format(epoch + 1, min_mse))\n","            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path\n","            early_stop_cnt = 0\n","        else:\n","            early_stop_cnt += 1\n","\n","        epoch += 1\n","        loss_record['dev'].append(dev_mse)\n","        if early_stop_cnt > config['early_stop']:\n","            # Stop training if your model stops improving for \"config['early_stop']\" epochs.\n","            break\n","\n","    print('Finished training after {} epochs'.format(epoch))\n","    return min_mse, loss_record"],"execution_count":24,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0hSd4Bn3O2PL"},"source":["## **Validation**"]},{"cell_type":"code","metadata":{"id":"yrxrD3YsN3U2","executionInfo":{"status":"ok","timestamp":1616767057554,"user_tz":-480,"elapsed":773,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["def dev(dv_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    total_loss = 0\n","    for x, y in dv_set:                         # iterate through the dataloader\n","        x, y = x.to(device), y.to(device)       # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss\n","    total_loss = total_loss / len(dv_set.dataset)              # compute averaged loss\n","\n","    return total_loss"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g0pdrhQAO41L"},"source":["## **Testing**"]},{"cell_type":"code","metadata":{"id":"aSBMRFlYN5tB","executionInfo":{"status":"ok","timestamp":1616767061775,"user_tz":-480,"elapsed":1005,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["def test(tt_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    preds = []\n","    for x in tt_set:                            # iterate through the dataloader\n","        x = x.to(device)                        # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            preds.append(pred.detach().cpu())   # collect prediction\n","    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array\n","    return preds"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SvckkF5dvf0j"},"source":["# **Setup Hyper-parameters**\n","\n","`config` contains hyper-parameters for training and the path to save your model."]},{"cell_type":"code","metadata":{"id":"NPXpdumwPjE7","executionInfo":{"status":"ok","timestamp":1616771411674,"user_tz":-480,"elapsed":805,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["device = get_device()                 # get the current available device ('cpu' or 'cuda')\n","os.makedirs('models', exist_ok=True)  # The trained model will be saved to ./models/\n","target_only = True                   # TODO: Using 40 states & 2 tested_positive features\n","\n","# TODO: How to tune these hyper-parameters to improve your model's performance?\n","config = {\n","    'n_epochs': 300000,                # maximum number of epochs 3000\n","    'batch_size': 90,               # mini-batch size for dataloader270SGD\n","    'optimizer': 'SGD',              # optimization algorithm (optimizer in torch.optim)SGD/Adagrad\n","    'optim_hparas': {                # hyper-parameters for the optimizer (depends on which optimizer you are using)\n","        'lr': 0.0001,                 # learning rate of SGD 0.0001\n","        'momentum': 0.9,                # momentum for SGD\n","        'weight_decay': 0.005              #L2regularization\n","    },\n","    'early_stop': 200,               # early stopping epochs (the number epochs since your model's last improvement)\n","    'save_path': 'models/model.pth'  # your model will be saved here\n","}"],"execution_count":71,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6j1eOV3TOH-j"},"source":["# **Load data and model**"]},{"cell_type":"code","metadata":{"id":"eNrYBMmePLKm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616769802206,"user_tz":-480,"elapsed":1514,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"8094977e-8c1c-4a9e-ddf3-f5d8babceed1"},"source":["tr_set = prep_dataloader(tr_path, 'train', config['batch_size'], target_only=target_only)\n","dv_set = prep_dataloader(tr_path, 'dev', config['batch_size'], target_only=target_only)\n","tt_set = prep_dataloader(tt_path, 'test', config['batch_size'], target_only=target_only)"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Finished reading the train set of COVID19 Dataset (2565 samples found, each dim = 54)\n","Finished reading the dev set of COVID19 Dataset (135 samples found, each dim = 54)\n","Finished reading the test set of COVID19 Dataset (893 samples found, each dim = 54)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FHylSirLP9oh","executionInfo":{"status":"ok","timestamp":1616771423340,"user_tz":-480,"elapsed":931,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}}},"source":["model = NeuralNet(tr_set.dataset.dim).to(device)  # Construct model and move to device"],"execution_count":72,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sX2B_zgSOPTJ"},"source":["# **Start Training!**"]},{"cell_type":"code","metadata":{"id":"GrEbUxazQAAZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616771457929,"user_tz":-480,"elapsed":31482,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"ac881578-3682-4ddf-bd03-dcea468df6aa"},"source":["model_loss, model_loss_record = train(tr_set, dv_set, model, config, device)"],"execution_count":73,"outputs":[{"output_type":"stream","text":["Saving model (epoch =    1, loss = 4.3297)\n","Saving model (epoch =    2, loss = 3.0521)\n","Saving model (epoch =    3, loss = 2.8302)\n","Saving model (epoch =    4, loss = 2.5925)\n","Saving model (epoch =    5, loss = 2.2873)\n","Saving model (epoch =    6, loss = 1.9803)\n","Saving model (epoch =    7, loss = 1.6084)\n","Saving model (epoch =    8, loss = 1.3044)\n","Saving model (epoch =    9, loss = 1.1730)\n","Saving model (epoch =   10, loss = 1.1132)\n","Saving model (epoch =   13, loss = 1.1007)\n","Saving model (epoch =   15, loss = 1.0960)\n","Saving model (epoch =   19, loss = 1.0817)\n","Saving model (epoch =   20, loss = 1.0757)\n","Saving model (epoch =   27, loss = 1.0678)\n","Saving model (epoch =   30, loss = 1.0654)\n","Saving model (epoch =   31, loss = 1.0531)\n","Saving model (epoch =   33, loss = 1.0506)\n","Saving model (epoch =   34, loss = 1.0348)\n","Saving model (epoch =   37, loss = 1.0306)\n","Saving model (epoch =   38, loss = 1.0263)\n","Saving model (epoch =   39, loss = 1.0231)\n","Saving model (epoch =   41, loss = 1.0183)\n","Saving model (epoch =   43, loss = 1.0126)\n","Saving model (epoch =   45, loss = 1.0084)\n","Saving model (epoch =   47, loss = 1.0041)\n","Saving model (epoch =   49, loss = 1.0013)\n","Saving model (epoch =   54, loss = 0.9910)\n","Saving model (epoch =   56, loss = 0.9894)\n","Saving model (epoch =   59, loss = 0.9872)\n","Saving model (epoch =   60, loss = 0.9830)\n","Saving model (epoch =   62, loss = 0.9814)\n","Saving model (epoch =   64, loss = 0.9736)\n","Saving model (epoch =   65, loss = 0.9717)\n","Saving model (epoch =   67, loss = 0.9686)\n","Saving model (epoch =   72, loss = 0.9660)\n","Saving model (epoch =   77, loss = 0.9560)\n","Saving model (epoch =   78, loss = 0.9545)\n","Saving model (epoch =   79, loss = 0.9537)\n","Saving model (epoch =   82, loss = 0.9520)\n","Saving model (epoch =   83, loss = 0.9493)\n","Saving model (epoch =   85, loss = 0.9480)\n","Saving model (epoch =   87, loss = 0.9453)\n","Saving model (epoch =   89, loss = 0.9443)\n","Saving model (epoch =   93, loss = 0.9413)\n","Saving model (epoch =   95, loss = 0.9402)\n","Saving model (epoch =   97, loss = 0.9393)\n","Saving model (epoch =  103, loss = 0.9346)\n","Saving model (epoch =  105, loss = 0.9326)\n","Saving model (epoch =  109, loss = 0.9309)\n","Saving model (epoch =  115, loss = 0.9276)\n","Saving model (epoch =  118, loss = 0.9269)\n","Saving model (epoch =  122, loss = 0.9243)\n","Saving model (epoch =  123, loss = 0.9239)\n","Saving model (epoch =  135, loss = 0.9208)\n","Saving model (epoch =  137, loss = 0.9200)\n","Saving model (epoch =  144, loss = 0.9195)\n","Saving model (epoch =  145, loss = 0.9182)\n","Saving model (epoch =  159, loss = 0.9164)\n","Saving model (epoch =  172, loss = 0.9153)\n","Saving model (epoch =  174, loss = 0.9140)\n","Saving model (epoch =  191, loss = 0.9140)\n","Saving model (epoch =  199, loss = 0.9116)\n","Saving model (epoch =  205, loss = 0.9114)\n","Saving model (epoch =  212, loss = 0.9111)\n","Saving model (epoch =  254, loss = 0.9105)\n","Saving model (epoch =  260, loss = 0.9098)\n","Saving model (epoch =  277, loss = 0.9083)\n","Saving model (epoch =  312, loss = 0.9081)\n","Saving model (epoch =  341, loss = 0.9077)\n","Saving model (epoch =  354, loss = 0.9075)\n","Saving model (epoch =  362, loss = 0.9068)\n","Saving model (epoch =  379, loss = 0.9068)\n","Saving model (epoch =  386, loss = 0.9064)\n","Saving model (epoch =  407, loss = 0.9063)\n","Saving model (epoch =  450, loss = 0.9059)\n","Saving model (epoch =  474, loss = 0.9059)\n","Saving model (epoch =  483, loss = 0.9057)\n","Saving model (epoch =  488, loss = 0.9041)\n","Saving model (epoch =  510, loss = 0.9031)\n","Finished training after 711 epochs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hsNO9nnXQBvP","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1616771331762,"user_tz":-480,"elapsed":941,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"85560736-b60c-474e-c321-90b2574ea2b3"},"source":["plot_learning_curve(model_loss_record, title='deep model')"],"execution_count":68,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"3iZTVn5WQFpX","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1616771335810,"user_tz":-480,"elapsed":1084,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"3df9840e-1492-4438-ce73-98f0f825a21a"},"source":["del model\n","model = NeuralNet(tr_set.dataset.dim).to(device)\n","ckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model\n","model.load_state_dict(ckpt)\n","plot_pred(dv_set, model, device)  # Show prediction on the validation set"],"execution_count":69,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"aQikz3IPiyPf"},"source":["# **Testing**\n","The predictions of your model on testing set will be stored at `pred.csv`."]},{"cell_type":"code","metadata":{"id":"O8cTuQjQQOon","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616771350215,"user_tz":-480,"elapsed":774,"user":{"displayName":"林國聖","photoUrl":"","userId":"11406513366398582314"}},"outputId":"856f6f6b-dabe-4a04-df97-9c3fe6bdbeb4"},"source":["def save_pred(preds, file):\n","    ''' Save predictions to specified file '''\n","    print('Saving results to {}'.format(file))\n","    with open(file, 'w') as fp:\n","        writer = csv.writer(fp)\n","        writer.writerow(['id', 'tested_positive'])\n","        for i, p in enumerate(preds):\n","            writer.writerow([i, p])\n","\n","preds = test(tt_set, model, device)  # predict COVID-19 cases with your model\n","save_pred(preds, 'pre032658832.csv')         # save prediction file to pred.csv"],"execution_count":70,"outputs":[{"output_type":"stream","text":["Saving results to pre032658832.csv\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nfrVxqJanGpE"},"source":["# **Hints**\n","\n","## **Simple Baseline**\n","* Run sample code\n","\n","## **Medium Baseline**\n","* Feature selection: 40 states + 2 `tested_positive` (`TODO` in dataset)\n","\n","## **Strong Baseline**\n","* Feature selection (what other features are useful?)\n","* DNN architecture (layers? dimension? activation function?)\n","* Training (mini-batch? optimizer? learning rate?)\n","* L2 regularization\n","* There are some mistakes in the sample code, can you find them?"]},{"cell_type":"markdown","metadata":{"id":"9tmCwXgpot3t"},"source":["# **Reference**\n","This code is completely written by Heng-Jui Chang @ NTUEE.  \n","Copying or reusing this code is required to specify the original author. \n","\n","E.g.  \n","Source: Heng-Jui Chang @ NTUEE (https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb)\n"]}]}